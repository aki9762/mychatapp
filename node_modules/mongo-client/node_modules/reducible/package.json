{
  "name": "reducible",
  "id": "reducible",
  "version": "1.0.6",
  "description": "High-order abstraction for reducible data structures",
  "keywords": [
    "reducers",
    "reducible",
    "reduce",
    "data",
    "sequence",
    "stream",
    "collection",
    "transformation",
    "composable",
    "async",
    "signal",
    "manipulation"
  ],
  "author": {
    "name": "Irakli Gozalishvili",
    "email": "rfobic@gmail.com",
    "url": "http://jeditoolkit.com"
  },
  "homepage": "https://github.com/Gozala/reducible",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Gozala/reducible.git",
    "web": "https://github.com/Gozala/reducible"
  },
  "bugs": {
    "url": "http://github.com/Gozala/reducible/issues/"
  },
  "devDependencies": {
    "test": "~0.x.0",
    "phantomify": "~0.x.0"
  },
  "main": "./reducible.js",
  "scripts": {
    "test": "npm run test-node && npm run test-browser",
    "test-browser": "node ./node_modules/phantomify/bin/cmd.js ./test/index.js",
    "test-node": "node ./test/index.js"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Gozala/reducible/License.md"
    }
  ],
  "dependencies": {
    "method": "~2.0.x"
  },
  "gitHead": "2f3899f22325af695a6b33d5369467d51ba82eda",
  "readme": "# reducible\r\n\r\n[![Build Status](https://secure.travis-ci.org/Gozala/reducible.png)](http://travis-ci.org/Gozala/reducible)\r\n\r\nLibrary defines higher-order abstraction for reducible data structures -\r\ncollections based upon [reduce][].\r\n\r\nMost functional languages (including beloved JS) typically come with some\r\ncollection transformation functions like [filter][] and [map][] that take a\r\nlogical collections and return transformed version of it. Unfortunately they\r\ntend to [complect][], by implying mechanism, order, laziness and\r\nrepresentation. This library is an attempt to provide simple solution for\r\nsome of the hard problems by decomplecting and building upon simple premise -\r\nminimum definition of collection is something that is reducible.\r\n\r\nMore specifically library defines super-generalized and minimal abstraction for\r\ncollections - a collection is some set of things that, when given a function to\r\napply to its contents, can do so and give you the result, i.e. a collection is\r\n(at minimum) **reducible**. In other words, you can call `reduce` on it.\r\n\r\n## reducers\r\n\r\nThis library provides an abstraction for **reducible** data structures and\r\nimplementation of internal [reduce][] for built-in data types. It can be used\r\nto implement to define abstraction for all other types. This is also foundation\r\nfor [reducers][] - Library for higher-order manipulation of reducible\r\ncollections.\r\n\r\n## Install\r\n\r\n    npm install reducible\r\n\r\n## Prior art\r\n\r\n- [Clojure reducers][]\r\n- [Haskell Enumerator/Iteratee][]\r\n\r\n[Clojure reducers]:http://clojure.com/blog/2012/05/15/anatomy-of-reducer.html\r\n[Haskell Enumerator/Iteratee]:http://www.haskell.org/haskellwiki/Enumerator_and_iteratee\r\n\r\n[reducers]:https://github.com/Gozala/reducers\r\n[reduce]:http://en.wikipedia.org/wiki/Reduce_%28higher-order_function%29\r\n[map]:https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map\r\n[filter]:https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter\r\n[complect]:http://www.infoq.com/presentations/Simple-Made-Easy\r\n",
  "readmeFilename": "Readme.md",
  "_id": "reducible@1.0.6",
  "_shasum": "d917da8be7128c71b2038e3489d5968ca61b9e38",
  "_from": "raynos/reducible#v1.0.6",
  "_resolved": "git://github.com/raynos/reducible.git#2f3899f22325af695a6b33d5369467d51ba82eda"
}
